name: Continuous Integration - Nimbus

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, reopened ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # - name: Cache Maven dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.m2/repository
      #     key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-maven
    
      - name: Build JAR
        working-directory: ./users_ms
        run: mvn clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Determine JAR File Name
        working-directory: ./users_ms
        run: echo "JAR_FILE=$(ls target/*.jar | xargs -n 1 basename)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./users_ms
          platforms: linux/amd64
          push: true
          tags: zzzmiike/users_ms:4.0.0
          build-args: |
            JAR_FILE=${{ env.JAR_FILE }}
            USERS_URL_DATABASE=${{ secrets.USERS_URL_DATABASE }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }}
            SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          

      - name: Build Node.js Service
        run: |
          cd node_chat_ms
          npm install
          IMAGE_NAME=zzzmiike/node_chat_ms:2.0.0
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          cd ..